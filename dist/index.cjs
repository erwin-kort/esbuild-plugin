var g=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var x=Object.prototype.hasOwnProperty;var y=(i,t)=>{for(var r in t)g(i,r,{get:t[r],enumerable:!0})},$=(i,t,r,l)=>{if(t&&typeof t=="object"||typeof t=="function")for(let e of R(t))!x.call(i,e)&&e!==r&&g(i,e,{get:()=>t[e],enumerable:!(l=P(t,e))||l.enumerable});return i};var j=i=>$(g({},"__esModule",{value:!0}),i);var E={};y(E,{plugin:()=>F});module.exports=j(E);var a=require("path"),m=require("url");var f=require("path"),c=require("fs/promises");async function u(i,t,r=!1){let l=0,e=[],s=await(0,c.readdir)(i,{withFileTypes:!0}),n=[];for(;l<s.length;){let o=s[l++];r&&o.isDirectory()?n.push(u((0,f.resolve)(i,o.name),t,!0)):o.isFile()&&t.test(o.name)&&e.push((0,f.resolve)(i,o.name))}l=0;let p=await Promise.all(n);for(;l<p.length;)e.push(...p[l++]);return e}var F={name:"@erwin-kort/esbuild-plugin",setup:async i=>{let t=/.(m|c)?ts$/;i.onResolve({filter:/\/\*$/,namespace:"file"},({path:r,importer:l,resolveDir:e,kind:s})=>{if(s!="import-statement")throw new Error("glob import only works with import statements");let n="js";return t.test(l)&&(n="ts"),{path:(0,a.resolve)(e,r),namespace:"@erwin-kort/esbuild-plugin#"+n}}),h(i,"js"),h(i,"ts")}},h=(i,t)=>{let r=new RegExp(a.sep+"*$"),l;t=="js"?l=new RegExp(".(m|c)?js$"):l=new RegExp(".(m|c)?(j|t)s$"),i.onLoad({filter:r,namespace:"@erwin-kort/esbuild-plugin#"+t},async({path:e})=>{let{href:s}=(0,m.pathToFileURL)(e),n=[],p=[];s.endsWith("/**/*")?(e=(0,m.fileURLToPath)(s.replace(/\/\*\*\/\*$/,"")),p.push(u(e,l,!0))):s.endsWith("/*")&&(e=(0,m.fileURLToPath)(s.replace(/\/\*$/,"")),p.push(u(e,l)));let o=0,w=await Promise.all(p);for(;o<w.length;)n.push(...w[o++]);return{contents:n.map(d=>`import './${(0,a.relative)(e,d).replace(a.sep,"/")}';`).join(""),resolveDir:e,loader:t}})};0&&(module.exports={plugin});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2luZGV4LnRzIiwgIi4uL3NyYy91dGlsLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJpbXBvcnQgdHlwZSB7IFBsdWdpbiwgUGx1Z2luQnVpbGQgfSBmcm9tICdlc2J1aWxkJ1xuaW1wb3J0IHsgcmVzb2x2ZSwgcmVsYXRpdmUsIHNlcCB9IGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBwYXRoVG9GaWxlVVJMLCBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJ1xuXG5pbXBvcnQgeyBzZWFyY2hGaWxlcyB9IGZyb20gJy4vdXRpbCdcblxuZXhwb3J0IGxldCBwbHVnaW46IFBsdWdpbiA9IHtcbiAgbmFtZTogJ0Blcndpbi1rb3J0L2VzYnVpbGQtcGx1Z2luJyxcbiAgc2V0dXA6IGFzeW5jIChidWlsZCkgPT4ge1xuICAgIGxldCB0c1JlZ2V4ID0gLy4obXxjKT90cyQvXG5cbiAgICBidWlsZC5vblJlc29sdmUoe1xuICAgICAgZmlsdGVyOiAvXFwvXFwqJC8sXG4gICAgICBuYW1lc3BhY2U6ICdmaWxlJyxcbiAgICB9LCAoeyBwYXRoLCBpbXBvcnRlciwgcmVzb2x2ZURpciwga2luZCB9KSA9PiB7XG4gICAgICBpZiAoa2luZCAhPSAnaW1wb3J0LXN0YXRlbWVudCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdnbG9iIGltcG9ydCBvbmx5IHdvcmtzIHdpdGggaW1wb3J0IHN0YXRlbWVudHMnKVxuICAgICAgfVxuXG4gICAgICBsZXQgbG9hZGVyID0gJ2pzJ1xuXG4gICAgICBpZiAodHNSZWdleC50ZXN0KGltcG9ydGVyKSkge1xuICAgICAgICBsb2FkZXIgPSAndHMnXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGg6IHJlc29sdmUocmVzb2x2ZURpciwgcGF0aCksXG4gICAgICAgIG5hbWVzcGFjZTogJ0Blcndpbi1rb3J0L2VzYnVpbGQtcGx1Z2luIycgKyBsb2FkZXIsXG4gICAgICB9XG4gICAgfSlcblxuICAgIGFwcGx5T25Mb2FkKGJ1aWxkLCAnanMnKVxuICAgIGFwcGx5T25Mb2FkKGJ1aWxkLCAndHMnKVxuICB9LFxufVxuXG5sZXQgYXBwbHlPbkxvYWQgPSAoYnVpbGQ6IFBsdWdpbkJ1aWxkLCBsb2FkZXI6ICdqcycgfCAndHMnKSA9PiB7XG4gIGxldCBsb2FkRmlsdGVyID0gbmV3IFJlZ0V4cChzZXAgKyAnKiQnKVxuICBsZXQgc2VhcmNoRmlsdGVyOiBSZWdFeHBcblxuICBpZiAobG9hZGVyID09ICdqcycpIHtcbiAgICBzZWFyY2hGaWx0ZXIgPSBuZXcgUmVnRXhwKCcuKG18Yyk/anMkJylcbiAgfSBlbHNlIHtcbiAgICBzZWFyY2hGaWx0ZXIgPSBuZXcgUmVnRXhwKCcuKG18Yyk/KGp8dClzJCcpXG4gIH1cblxuICBidWlsZC5vbkxvYWQoXG4gICAgeyBmaWx0ZXI6IGxvYWRGaWx0ZXIsIG5hbWVzcGFjZTogJ0Blcndpbi1rb3J0L2VzYnVpbGQtcGx1Z2luIycgKyBsb2FkZXIgfSxcbiAgICBhc3luYyAoeyBwYXRoIH0pID0+IHtcbiAgICAgIGxldCB7IGhyZWYgfSA9IHBhdGhUb0ZpbGVVUkwocGF0aClcbiAgICAgIGxldCBmaWxlczogc3RyaW5nW10gPSBbXVxuICAgICAgbGV0IGF3YWl0aW5nOiBQcm9taXNlPHN0cmluZ1tdPltdID0gW11cblxuICAgICAgaWYgKGhyZWYuZW5kc1dpdGgoJy8qKi8qJykpIHtcbiAgICAgICAgcGF0aCA9IGZpbGVVUkxUb1BhdGgoaHJlZi5yZXBsYWNlKC9cXC9cXCpcXCpcXC9cXCokLywgJycpKVxuXG4gICAgICAgIGF3YWl0aW5nLnB1c2goc2VhcmNoRmlsZXMocGF0aCwgc2VhcmNoRmlsdGVyLCB0cnVlKSlcbiAgICAgIH0gZWxzZSBpZiAoaHJlZi5lbmRzV2l0aCgnLyonKSkge1xuICAgICAgICBwYXRoID0gZmlsZVVSTFRvUGF0aChocmVmLnJlcGxhY2UoL1xcL1xcKiQvLCAnJykpXG5cbiAgICAgICAgYXdhaXRpbmcucHVzaChzZWFyY2hGaWxlcyhwYXRoLCBzZWFyY2hGaWx0ZXIpKVxuICAgICAgfVxuXG4gICAgICBsZXQgaSA9IDBcbiAgICAgIGxldCBhd2FpdGVkID0gYXdhaXQgUHJvbWlzZS5hbGwoYXdhaXRpbmcpXG5cbiAgICAgIHdoaWxlIChpIDwgYXdhaXRlZC5sZW5ndGgpIHtcbiAgICAgICAgZmlsZXMucHVzaCguLi5hd2FpdGVkW2krK10pXG4gICAgICB9XG5cbiAgICAgIGxldCBjb250ZW50cyA9IGZpbGVzXG4gICAgICAgIC5tYXAoKF9wYXRoKSA9PiBgaW1wb3J0ICcuLyR7cmVsYXRpdmUocGF0aCwgX3BhdGgpLnJlcGxhY2Uoc2VwLCAnLycpfSc7YClcbiAgICAgICAgLmpvaW4oJycpXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvbnRlbnRzLFxuICAgICAgICByZXNvbHZlRGlyOiBwYXRoLFxuICAgICAgICBsb2FkZXIsXG4gICAgICB9XG4gICAgfSxcbiAgKVxufVxuIiwgImltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJ1xuaW1wb3J0IHsgcmVhZGRpciB9IGZyb20gJ2ZzL3Byb21pc2VzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VhcmNoRmlsZXMocGF0aDogc3RyaW5nLCBmaWx0ZXI6IFJlZ0V4cCwgcmVjdXJzaXZlID0gZmFsc2UpIHtcbiAgbGV0IGkgPSAwXG4gIGxldCBmaWxlczogc3RyaW5nW10gPSBbXVxuICBsZXQgZGlyZW50cyA9IGF3YWl0IHJlYWRkaXIocGF0aCwgeyB3aXRoRmlsZVR5cGVzOiB0cnVlIH0pXG4gIGxldCBhd2FpdGluZzogUHJvbWlzZTxzdHJpbmdbXT5bXSA9IFtdXG5cbiAgd2hpbGUgKGkgPCBkaXJlbnRzLmxlbmd0aCkge1xuICAgIGxldCBkaXJlbnQgPSBkaXJlbnRzW2krK11cblxuICAgIGlmIChyZWN1cnNpdmUgJiYgZGlyZW50LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgIGF3YWl0aW5nLnB1c2goXG4gICAgICAgIHNlYXJjaEZpbGVzKHJlc29sdmUocGF0aCwgZGlyZW50Lm5hbWUpLCBmaWx0ZXIsIHRydWUpLFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoZGlyZW50LmlzRmlsZSgpKSB7XG4gICAgICBpZiAoZmlsdGVyLnRlc3QoZGlyZW50Lm5hbWUpKSB7XG4gICAgICAgIGZpbGVzLnB1c2gocmVzb2x2ZShwYXRoLCBkaXJlbnQubmFtZSkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaSA9IDBcbiAgbGV0IGF3YWl0ZWQgPSBhd2FpdCBQcm9taXNlLmFsbChhd2FpdGluZylcblxuICB3aGlsZSAoaSA8IGF3YWl0ZWQubGVuZ3RoKSB7XG4gICAgZmlsZXMucHVzaCguLi5hd2FpdGVkW2krK10pXG4gIH1cblxuICByZXR1cm4gZmlsZXNcbn1cbiJdLAogICJtYXBwaW5ncyI6ICI0WkFBQSxpREFDQSxNQUF1QyxnQkFDdkMsRUFBNkMsZUNGN0MsTUFBd0IsZ0JBQ3hCLEVBQXdCLHVCQUV4QixpQkFBa0MsRUFBYyxFQUFnQixFQUFZLEdBQU8sQ0FDakYsR0FBSSxHQUFJLEVBQ0osRUFBa0IsQ0FBQyxFQUNuQixFQUFVLEtBQU0sY0FBUSxFQUFNLENBQUUsY0FBZSxFQUFLLENBQUMsRUFDckQsRUFBZ0MsQ0FBQyxFQUVyQyxLQUFPLEVBQUksRUFBUSxRQUFRLENBQ3pCLEdBQUksR0FBUyxFQUFRLEtBRXJCLEFBQUksR0FBYSxFQUFPLFlBQVksRUFDbEMsRUFBUyxLQUNQLEVBQVksY0FBUSxFQUFNLEVBQU8sSUFBSSxFQUFHLEVBQVEsRUFBSSxDQUN0RCxFQUNTLEVBQU8sT0FBTyxHQUNuQixFQUFPLEtBQUssRUFBTyxJQUFJLEdBQ3pCLEVBQU0sS0FBSyxjQUFRLEVBQU0sRUFBTyxJQUFJLENBQUMsQ0FHM0MsQ0FFQSxFQUFJLEVBQ0osR0FBSSxHQUFVLEtBQU0sU0FBUSxJQUFJLENBQVEsRUFFeEMsS0FBTyxFQUFJLEVBQVEsUUFDakIsRUFBTSxLQUFLLEdBQUcsRUFBUSxJQUFJLEVBRzVCLE1BQU8sRUFDVCxDRHpCTyxHQUFJLEdBQWlCLENBQzFCLEtBQU0sNkJBQ04sTUFBTyxLQUFPLElBQVUsQ0FDdEIsR0FBSSxHQUFVLGFBRWQsRUFBTSxVQUFVLENBQ2QsT0FBUSxRQUNSLFVBQVcsTUFDYixFQUFHLENBQUMsQ0FBRSxPQUFNLFdBQVUsYUFBWSxVQUFXLENBQzNDLEdBQUksR0FBUSxtQkFDVixLQUFNLElBQUksT0FBTSwrQ0FBK0MsRUFHakUsR0FBSSxHQUFTLEtBRWIsTUFBSSxHQUFRLEtBQUssQ0FBUSxHQUN2QixHQUFTLE1BR0osQ0FDTCxLQUFNLGNBQVEsRUFBWSxDQUFJLEVBQzlCLFVBQVcsOEJBQWdDLENBQzdDLENBQ0YsQ0FBQyxFQUVELEVBQVksRUFBTyxJQUFJLEVBQ3ZCLEVBQVksRUFBTyxJQUFJLENBQ3pCLENBQ0YsRUFFSSxFQUFjLENBQUMsRUFBb0IsSUFBd0IsQ0FDN0QsR0FBSSxHQUFhLEdBQUksUUFBTyxNQUFNLElBQUksRUFDbEMsRUFFSixBQUFJLEdBQVUsS0FDWixFQUFlLEdBQUksUUFBTyxZQUFZLEVBRXRDLEVBQWUsR0FBSSxRQUFPLGdCQUFnQixFQUc1QyxFQUFNLE9BQ0osQ0FBRSxPQUFRLEVBQVksVUFBVyw4QkFBZ0MsQ0FBTyxFQUN4RSxNQUFPLENBQUUsVUFBVyxDQUNsQixHQUFJLENBQUUsUUFBUyxvQkFBYyxDQUFJLEVBQzdCLEVBQWtCLENBQUMsRUFDbkIsRUFBZ0MsQ0FBQyxFQUVyQyxBQUFJLEVBQUssU0FBUyxPQUFPLEVBQ3ZCLEdBQU8sb0JBQWMsRUFBSyxRQUFRLGNBQWUsRUFBRSxDQUFDLEVBRXBELEVBQVMsS0FBSyxFQUFZLEVBQU0sRUFBYyxFQUFJLENBQUMsR0FDMUMsRUFBSyxTQUFTLElBQUksR0FDM0IsR0FBTyxvQkFBYyxFQUFLLFFBQVEsUUFBUyxFQUFFLENBQUMsRUFFOUMsRUFBUyxLQUFLLEVBQVksRUFBTSxDQUFZLENBQUMsR0FHL0MsR0FBSSxHQUFJLEVBQ0osRUFBVSxLQUFNLFNBQVEsSUFBSSxDQUFRLEVBRXhDLEtBQU8sRUFBSSxFQUFRLFFBQ2pCLEVBQU0sS0FBSyxHQUFHLEVBQVEsSUFBSSxFQU81QixNQUFPLENBQ0wsU0FMYSxFQUNaLElBQUksQUFBQyxHQUFVLGFBQWEsZUFBUyxFQUFNLENBQUssRUFBRSxRQUFRLE1BQUssR0FBRyxLQUFLLEVBQ3ZFLEtBQUssRUFBRSxFQUlSLFdBQVksRUFDWixRQUNGLENBQ0YsQ0FDRixDQUNGIiwKICAibmFtZXMiOiBbXQp9Cg==
